name: Auto Release

on:
  push:
    branches: [ main ]

jobs:
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore:') && !contains(github.event.head_commit.message, 'docs:')"
    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Get current version
      id: current-version
      run: |
        cd src-tauri
        echo "version=$(cargo metadata --format-version 1 | jq -r '.packages[0].version')" >> $GITHUB_OUTPUT

    - name: Check if release is needed
      id: check-release
      run: |
        # Check if this is a significant change (not just docs or chores)
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        if [[ "$COMMIT_MSG" =~ ^(feat|fix|perf|breaking): ]]; then
          echo "release-needed=true" >> $GITHUB_OUTPUT
        else
          echo "release-needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Create release
      if: steps.check-release.outputs.release-needed == 'true'
      run: |
        # Bump version
        cd src-tauri
        cargo set-version --bump patch
        
        # Get new version
        NEW_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[0].version')
        
        # Update package.json
        cd ..
        npm version $NEW_VERSION --no-git-tag-version
        
        # Create tag
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "chore: bump version to $NEW_VERSION"
        git tag "v$NEW_VERSION"
        git push origin main
        git push origin "v$NEW_VERSION"

    - name: Notify release
      if: steps.check-release.outputs.release-needed == 'true'
      run: |
        echo "Auto-release created: v${{ steps.current-version.outputs.version }}"
        # Здесь можно добавить уведомления
